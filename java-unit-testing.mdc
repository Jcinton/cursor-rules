---
description: Java单元测试最佳实践，使用JUnit 5、Mockito和AssertJ进行高质量单元测试。
globs: **/src/test/java/**/*Test.java, **/src/test/java/**/*Tests.java
---

# Java单元测试最佳实践

## 测试框架和工具
- 使用JUnit 5作为测试框架
- 使用Mockito进行mock（@ExtendWith(MockitoExtension.class)、@Mock、@InjectMocks）
- 使用AssertJ进行流畅断言

## 命名规范
- 测试类：被测试类名 + Test（如UserServiceTest），放在相同包结构下
- 测试方法：should_ExpectedBehavior_When_StateUnderTest

## AAA模式（必须遵循）
- Arrange（准备）：设置测试数据和mock对象
- Act（执行）：调用被测试的方法
- Assert（断言）：验证结果

## Mock对象规范
- 对外部依赖（Mapper、外部服务）进行mock，不mock被测试类本身
- 使用when().thenReturn()设置mock行为
- 使用verify()验证调用：verify(mock).method()、verify(mock, times(n)).method()、verify(mock, never()).method()

## 断言规范
- 优先使用AssertJ：assertThat().isNotNull().extracting().containsExactly()
- 异常断言：assertThatThrownBy().isInstanceOf().hasMessage()
- 每个测试应有明确断言，避免过多断言

## 测试数据和参数化
- 使用@BeforeEach准备通用数据，Builder模式创建复杂对象
- 使用@ParameterizedTest进行多场景测试（@ValueSource、@CsvSource、@MethodSource）
- 避免使用随机数据

## 测试覆盖和隔离
- 覆盖所有业务逻辑、异常流程和边界条件，目标覆盖率≥80%
- 每个测试必须独立运行，不依赖执行顺序
- 使用@BeforeEach和@AfterEach清理状态，避免共享可变状态

## 代码覆盖率（JaCoCo）

### Maven配置
```xml
<plugin>
    <groupId>org.jacoco</groupId>
    <artifactId>jacoco-maven-plugin</artifactId>
    <version>0.8.11</version>
    <executions>
        <execution>
            <goals>
                <goal>prepare-agent</goal>
            </goals>
        </execution>
        <execution>
            <id>report</id>
            <phase>test</phase>
            <goals>
                <goal>report</goal>
            </goals>
        </execution>
        <execution>
            <id>jacoco-check</id>
            <goals>
                <goal>check</goal>
            </goals>
            <configuration>
                <rules>
                    <rule>
                        <element>PACKAGE</element>
                        <limits>
                            <limit>
                                <counter>LINE</counter>
                                <value>COVEREDRATIO</value>
                                <minimum>0.80</minimum>
                            </limit>
                            <limit>
                                <counter>BRANCH</counter>
                                <value>COVEREDRATIO</value>
                                <minimum>0.70</minimum>
                            </limit>
                        </limits>
                    </rule>
                </rules>
            </configuration>
        </execution>
    </executions>
</plugin>
```

### 覆盖率指标
- **行覆盖率（Line Coverage）** - 目标≥80%，衡量代码行是否被执行
- **分支覆盖率（Branch Coverage）** - 目标≥70%，衡量所有分支是否被测试
- **方法覆盖率（Method Coverage）** - 目标≥85%，衡量方法是否被调用
- **类覆盖率（Class Coverage）** - 目标≥90%，衡量类是否被测试

### 排除规则
```xml
<configuration>
    <excludes>
        <exclude>**/config/**</exclude>
        <exclude>**/entity/**</exclude>
        <exclude>**/dto/**</exclude>
        <exclude>**/exception/**</exclude>
        <exclude>**/*Application.class</exclude>
        <exclude>**/constant/**</exclude>
    </excludes>
</configuration>
```

### 生成报告
- Maven: `mvn clean test jacoco:report` - 生成HTML报告到target/site/jacoco/
- 查看报告：打开index.html查看详细覆盖率

### 覆盖率检查
- Maven: `mvn jacoco:check` - 验证覆盖率是否达标
- CI/CD集成：构建失败如果覆盖率低于阈值

### 最佳实践
- 优先提高分支覆盖率而不是行覆盖率
- 排除DTO、Entity、Config等不需要测试的类
- 在CI/CD中强制执行覆盖率检查
- 定期审查未覆盖代码，编写缺失的测试
- 不要为了覆盖率而写无意义的测试

## 测试组织和性能
- 使用@Nested和@DisplayName对相关测试分组
- 不测试：getter/setter、私有方法、第三方库功能、Spring框架本身
- 单元测试应快速执行（毫秒级），避免访问数据库和网络调用
