---
description: Gitflow工作流规则。执行git操作时应遵循这些规则。
---
# Gitflow工作流规则

## 主要分支

### main (或 master)
- 包含生产就绪代码
- 永远不要直接提交到main
- 只接受来自以下分支的合并：
  - hotfix/* 分支
  - release/* 分支
- 每次合并后必须标记版本号

### develop
- 主要开发分支
- 包含最新交付的开发变更
- 功能分支的源分支
- 永远不要直接提交到develop

## 支持分支

### feature/*
- 从develop分支创建
- 合并回：develop
- 命名约定：feature/[issue-id]-描述性名称
- 示例：feature/123-user-authentication
- 创建PR前必须与develop保持同步
- 合并后删除

### release/*
- 从develop分支创建
- 合并回：
  - main
  - develop
- 命名约定：release/vX.Y.Z
- 示例：release/v1.2.0
- 只允许错误修复、文档和发布相关的任务
- 不允许新功能
- 合并后删除

### hotfix/*
- 从main分支创建
- 合并回：
  - main
  - develop
- 命名约定：hotfix/vX.Y.Z
- 示例：hotfix/v1.2.1
- 仅用于紧急生产修复
- 合并后删除

## 提交信息

**重要：所有提交信息必须使用中文，禁止使用英文**

- 格式：`类型(范围): 描述`
- 类型：
  - 新功能: 添加新功能
  - 修复: 错误修复
  - 文档: 文档更改
  - 样式: 代码格式化、缺少分号等（不影响代码运行的变动）
  - 重构: 代码重构（既不是新增功能，也不是修复bug的代码变动）
  - 测试: 添加或修改测试
  - 构建: 构建工具或外部依赖的变动
  - 配置: 配置文件的变动
  - 维护: 其他维护任务

### 提交信息示例
- ✅ 正确：`新功能(用户模块): 添加用户登录功能`
- ✅ 正确：`修复(订单): 修复订单金额计算错误`
- ✅ 正确：`文档(README): 更新项目说明文档`
- ❌ 错误：`feat: add user login` （禁止使用英文）
- ❌ 错误：`fix: bug fix` （禁止使用英文）

## 版本控制

### 语义化版本控制
- MAJOR版本：不兼容的API更改
- MINOR版本：向后兼容的功能添加
- PATCH版本：向后兼容的错误修复

## Pull Request规则

1. 所有更改必须通过Pull Request
2. 必需的审批数量：至少1个
3. CI检查必须通过
4. 不允许直接提交到受保护的分支（main、develop）
5. 合并前分支必须是最新的
6. 合并后删除分支

## 分支保护规则

### main 和 develop
- 需要Pull Request审查
- 需要状态检查通过
- 需要分支保持最新
- 对管理员也应用限制
- 不允许强制推送
- 不允许删除

## 发布流程

1. 从develop创建release分支
2. 提升版本号
3. 修复任何发布特定的问题
4. 创建PR到main
5. 合并到main后：
   - 标记发布版本
   - 合并回develop
   - 删除release分支

## 热修复流程

1. 从main创建hotfix分支
2. 修复问题
3. 提升补丁版本号
4. 创建PR到main
5. 合并到main后：
   - 标记发布版本
   - 合并回develop
   - 删除hotfix分支 