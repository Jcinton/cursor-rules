---
description: 设定数据传输对象（DTO）的标准，使用Lombok简化代码，包括参数验证注解。
globs: **/src/main/java/com/example/dto/*.java, **/src/main/java/com/example/dtos/*.java
---

# DTO类规范

## 基础规范
- 使用普通class类型，配合Lombok注解
- 必须使用@Data注解（生成getter、setter、toString、equals、hashCode）
- 对于不可变DTO，使用@Value注解（生成final字段和全参构造函数）
- 类名以DTO结尾（如UserDTO、OrderDTO）

## 验证注解
- 使用Jakarta Validation（javax.validation）注解进行参数验证
- 常用注解：@NotNull、@NotBlank、@NotEmpty、@Email、@Size、@Min、@Max、@Pattern
- 在Controller层使用@Valid或@Validated触发验证

## Lombok注解
- @Data - 可变DTO，生成getter/setter/toString/equals/hashCode
- @Value - 不可变DTO，所有字段final，只生成getter
- @Builder - 构建器模式，方便创建对象
- @NoArgsConstructor - 无参构造函数（JPA/MyBatis需要）
- @AllArgsConstructor - 全参构造函数
- @EqualsAndHashCode - 自定义equals和hashCode（如需排除某些字段）

## 示例
```java
// 可变DTO - 用于请求和响应
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class UserDTO {
    private Long id;
    
    @NotBlank(message = "用户名不能为空")
    @Size(min = 2, max = 50, message = "用户名长度必须在2-50之间")
    private String username;
    
    @NotBlank(message = "邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    private String email;
    
    @Min(value = 0, message = "年龄不能为负数")
    @Max(value = 150, message = "年龄不能超过150")
    private Integer age;
}

// 不可变DTO - 用于只读响应
@Value
@Builder
public class UserResponseDTO {
    Long id;
    String username;
    String email;
    LocalDateTime createTime;
}
```

## 最佳实践
- 请求DTO使用@Data + 验证注解
- 响应DTO使用@Value实现不可变
- 使用@Builder便于测试和对象创建
- 避免在DTO中包含业务逻辑
- DTO字段应与前端/API文档保持一致