---
description: 使用Flask和SQLite进行现代软件开发的Python最佳实践和模式
globs: **/*.py, src/**/*.py, tests/**/*.py
---

# Python最佳实践

## 项目结构
- 使用src布局：`src/your_package_name/`
- 将测试放在与`src/`平行的`tests/`目录中
- 将配置保存在`config/`中或作为环境变量
- 将依赖存储在`requirements.txt`或`pyproject.toml`中
- 将静态文件放在`static/`目录中
- 使用`templates/`存放Jinja2模板

## 代码风格
- 遵循Black代码格式化规范
- 使用isort进行导入排序
- 遵循PEP 8命名约定：
  - 函数和变量使用snake_case
  - 类使用PascalCase
  - 常量使用UPPER_CASE
- 最大行长度为88个字符（Black默认）
- 优先使用绝对导入而非相对导入

## 类型提示
- 为所有函数参数和返回值使用类型提示
- 从`typing`模块导入类型
- 使用`Optional[Type]`而不是`Type | None`
- 为泛型类型使用`TypeVar`
- 在`types.py`中定义自定义类型
- 使用`Protocol`进行鸭子类型

## Flask结构
- 使用Flask工厂模式
- 使用Blueprint组织路由
- 使用Flask-SQLAlchemy作为数据库ORM
- 实现适当的错误处理器
- 使用Flask-Login进行身份验证
- 通过适当的关注点分离来组织视图

## 数据库
- 使用SQLAlchemy ORM
- 使用Alembic实现数据库迁移
- 使用适当的连接池
- 在单独的模块中定义模型
- 实现适当的关系映射
- 使用适当的索引策略

## 身份验证
- 使用Flask-Login进行会话管理
- 使用Flask-OAuth实现Google OAuth
- 使用bcrypt对密码进行哈希
- 使用适当的会话安全性
- 实现CSRF保护
- 使用适当的基于角色的访问控制

## API设计
- 使用Flask-RESTful构建REST API
- 实现适当的请求验证
- 使用适当的HTTP状态码
- 一致地处理错误
- 使用适当的响应格式
- 实现适当的速率限制

## 测试
- 使用pytest进行测试
- 为所有路由编写测试
- 使用pytest-cov进行覆盖率测试
- 实现适当的测试夹具
- 使用pytest-mock进行适当的模拟
- 测试所有错误场景

## 安全性
- 在生产环境中使用HTTPS
- 实现适当的CORS
- 清理所有用户输入
- 使用适当的会话配置
- 实现适当的日志记录
- 遵循OWASP指南

## 性能
- 使用Flask-Caching进行适当的缓存
- 实现数据库查询优化
- 使用适当的连接池
- 实现适当的分页
- 对繁重操作使用后台任务
- 监控应用程序性能

## 错误处理
- 创建自定义异常类
- 使用适当的try-except块
- 实现适当的日志记录
- 返回适当的错误响应
- 适当地处理边缘情况
- 使用适当的错误消息

## 文档
- 使用Google风格的文档字符串
- 记录所有公共API
- 保持README.md更新
- 使用适当的内联注释
- 生成API文档
- 记录环境设置

## 开发工作流
- 使用虚拟环境（venv）
- 实现pre-commit钩子
- 使用适当的Git工作流
- 遵循语义化版本控制
- 使用适当的CI/CD实践
- 实现适当的日志记录

## 依赖管理
- 固定依赖版本
- 在生产环境中使用requirements.txt
- 分离开发依赖
- 使用适当的包版本
- 定期更新依赖
- 检查安全漏洞