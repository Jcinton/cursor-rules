---
description: Spring Boot测试最佳实践，涵盖Spring Boot应用的各层测试策略和技巧。
globs: **/src/test/java/**/*.java
---

# Spring Boot测试最佳实践

## Spring Boot测试注解
- @SpringBootTest - 完整Spring上下文，适用于端到端集成测试，webEnvironment属性控制Web环境
- @WebMvcTest - 只加载Web层，自动配置MockMvc，Service需@MockBean
- @MybatisTest - 只加载MyBatis组件，配置内存数据库，自动回滚事务
- @RestClientTest - 测试RestTemplate/WebClient，自动配置MockRestServiceServer
- @JsonTest - 测试JSON序列化/反序列化，自动配置JacksonTester

## MockMvc测试实践
- 使用mockMvc.perform()模拟HTTP请求
- 使用andExpect()验证响应：status()、jsonPath()、content()
- 测试参数验证、异常处理、ApiResponse格式

## Mapper测试实践
- 使用@MybatisTest + @AutoConfigureTestDatabase测试Mapper
- 使用LambdaQueryWrapper构建查询
- 测试CRUD、分页、条件查询、逻辑删除等

## Service层测试实践
- 使用@ExtendWith(MockitoExtension.class)
- Mock Mapper和其他依赖
- 测试业务逻辑、异常处理、事务管理

## 测试配置管理
- 创建application-test.yml测试配置
- 使用@ActiveProfiles("test")激活测试配置
- 使用@TestPropertySource覆盖配置
- 使用@TestConfiguration提供测试专用Bean，@Primary覆盖生产Bean

## JSON测试
- 使用@JsonTest + JacksonTester测试JSON序列化
- 使用extractingJsonPathNumberValue()、extractingJsonPathStringValue()验证

## 缓存测试
- 使用@SpringBootTest + @EnableCaching
- 验证缓存命中和失效：cacheManager.getCache().get()

## 安全测试
- 使用@WithMockUser测试权限控制
- 测试不同角色的访问权限

## 异常处理测试
- 测试GlobalExceptionHandler
- 验证错误响应格式和消息

## 测试切片（Test Slicing）
- 使用切片测试减少上下文加载时间，只加载需要的组件
- @WebMvcTest、@MybatisTest、@RestClientTest、@JsonTest、@JdbcTest

## 测试性能优化
- 使用@DirtiesContext谨慎，会重新加载上下文
- 复用Spring上下文，避免频繁重启
- 使用@MockBean而不是@Autowired + Mockito.mock
- 分离快速测试和慢速测试
- 使用并行测试执行
